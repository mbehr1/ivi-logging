#pragma once

#include "ivi-logging-console.h"
#include "ivi-logging-null.h"
#include "ivi-logging.h"

// clang-format off
// backend defines:
@BACKEND_DEFINES@

// function info defines:
@FUNCTION_INFO_DEFINES@

#cmakedefine01 IVI_LOGGING_USE_CONTEXT_CONSOLE
#cmakedefine01 IVI_LOGGING_USE_CONTEXT_DLT
// clang-format on

#ifdef IVI_LOGGING_DLT_AVAILABLE
#include "ivi-logging-dlt.h"
#endif

    namespace logging
{

    using namespace logging;

    class DefaultConsoleLogContext : public ConsoleLogContext
    {
    public:
        DefaultConsoleLogContext()
        {
            // Enable debug logs for the console output, which are disabled by default
            setLogLevel(LogLevel::Debug);
        }
    };

    class DefaultConsoleLogData : public ConsoleLogData
    {
    public:
        DefaultConsoleLogData()
        {
            //		setPrefixFormat("[%s] %.4s | ");
            //		setSuffixFormat("  %s / %s - %d");
        }

        //	void writePrefix() override {	}
        //	void writeSuffix() override {	}
    };

    // clang-format off

#if IVI_LOGGING_USE_CONTEXT_CONSOLE && IVI_LOGGING_USE_CONTEXT_DLT
    typedef LogContextT<TypeSet<@CONSOLE_OR_NULL@, @DLT_OR_NULL@>,
        TypeSet<@CONSOLE_OR_NULL@::LogDataType, @DLT_OR_NULL@::LogDataType>>
        DefaultLogContext;
#elif !IVI_LOGGING_USE_CONTEXT_CONSOLE && IVI_LOGGING_USE_CONTEXT_DLT
    typedef LogContextT<TypeSet<@DLT_OR_NULL@>,
        TypeSet<@DLT_OR_NULL@::LogDataType>>
        DefaultLogContext;
#elif IVI_LOGGING_USE_CONTEXT_CONSOLE && !IVI_LOGGING_USE_CONTEXT_DLT
    typedef LogContextT<TypeSet<@CONSOLE_OR_NULL@>,
        TypeSet<@CONSOLE_OR_NULL@::LogDataType>>
        DefaultLogContext;
#else
    typedef LogContextT<TypeSet<@CONSOLE_OR_NULL@>,
        TypeSet<@CONSOLE_OR_NULL@::LogDataType>>
        DefaultLogContext;
#endif

    /// Use that type to output to the DLT if DLT is enabled, or to
    typedef LogContextT<TypeSet<@DLT_OR_NULL@>, TypeSet<@DLT_OR_NULL@::LogDataType>> DltIfEnabledLogContext;
    // clang-format on
}
